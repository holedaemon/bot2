// Code generated by qtc from "docs.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package templates

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type CommandGroup struct {
	Title       string     `json:"title"`
	Description string     `json:"description"`
	Commands    []*Command `json:"commands"`
}

type Command struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type DocsPage struct {
	BasePage
	Commands []*CommandGroup
}

func (p *DocsPage) StreamTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(`Docs`)
}

func (p *DocsPage) WriteTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *DocsPage) Title() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *DocsPage) StreamBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
    <section class="section">
        <div class="container">
            <h1 class="title">HOW TO READ</h1>
            <h2 class="subtitle">You could also read the slash command descriptions on your client, you know. IT'S NOT MY JOB TO EDUCATE YOU!!!!</h2>

            <div class="block">
                <p>Arguments wrapped in <code class="code">[]</code> are optional.</p>
            </div>

            <div class="block">
                <p>Arguments wrapped in <code class="code"><></code> are required.</p>
            </div>
        </div>
    </div>

    <section class="section">
        <div class="container">
            <h1 class="title">COMMANDS</h1>
            `)
	if len(p.Commands) == 0 {
		qw422016.N().S(`
                <h2 class="subtitle">THERE AIN'T SHIT HERE</h2>
            `)
	} else {
		qw422016.N().S(`
                `)
		for _, g := range p.Commands {
			qw422016.N().S(`
                    <div class="block">
                        <p class="is-size-4 has-text-weight-bold">`)
			qw422016.E().S(g.Title)
			qw422016.N().S(`</p>
                        <p class="is-size-5 mb-5">`)
			qw422016.E().S(g.Description)
			qw422016.N().S(`</p>

                        `)
			for _, c := range g.Commands {
				qw422016.N().S(`
                            <p class="is-size-5 has-text-weight-bold">/`)
				qw422016.E().S(c.Name)
				qw422016.N().S(`</p>
                            <p class="is-size-5 ml-5">   `)
				qw422016.E().S(c.Description)
				qw422016.N().S(`</p>
                        `)
			}
			qw422016.N().S(`
                    </div>
                `)
		}
		qw422016.N().S(`
            `)
	}
	qw422016.N().S(`
        </div>
    </section>
`)
}

func (p *DocsPage) WriteBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *DocsPage) Body() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
