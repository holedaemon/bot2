// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EgoraptorMention is an object representing the database table.
type EgoraptorMention struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID          string    `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	LastTimestamp    time.Time `boil:"last_timestamp" json:"last_timestamp" toml:"last_timestamp" yaml:"last_timestamp"`
	LastUser         string    `boil:"last_user" json:"last_user" toml:"last_user" yaml:"last_user"`
	Count            int       `boil:"count" json:"count" toml:"count" yaml:"count"`
	TimeoutOnMention bool      `boil:"timeout_on_mention" json:"timeout_on_mention" toml:"timeout_on_mention" yaml:"timeout_on_mention"`
	TimeoutLength    int       `boil:"timeout_length" json:"timeout_length" toml:"timeout_length" yaml:"timeout_length"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *egoraptorMentionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L egoraptorMentionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EgoraptorMentionColumns = struct {
	ID               string
	GuildID          string
	LastTimestamp    string
	LastUser         string
	Count            string
	TimeoutOnMention string
	TimeoutLength    string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	GuildID:          "guild_id",
	LastTimestamp:    "last_timestamp",
	LastUser:         "last_user",
	Count:            "count",
	TimeoutOnMention: "timeout_on_mention",
	TimeoutLength:    "timeout_length",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var EgoraptorMentionTableColumns = struct {
	ID               string
	GuildID          string
	LastTimestamp    string
	LastUser         string
	Count            string
	TimeoutOnMention string
	TimeoutLength    string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "egoraptor_mentions.id",
	GuildID:          "egoraptor_mentions.guild_id",
	LastTimestamp:    "egoraptor_mentions.last_timestamp",
	LastUser:         "egoraptor_mentions.last_user",
	Count:            "egoraptor_mentions.count",
	TimeoutOnMention: "egoraptor_mentions.timeout_on_mention",
	TimeoutLength:    "egoraptor_mentions.timeout_length",
	CreatedAt:        "egoraptor_mentions.created_at",
	UpdatedAt:        "egoraptor_mentions.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var EgoraptorMentionWhere = struct {
	ID               whereHelperint64
	GuildID          whereHelperstring
	LastTimestamp    whereHelpertime_Time
	LastUser         whereHelperstring
	Count            whereHelperint
	TimeoutOnMention whereHelperbool
	TimeoutLength    whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelperint64{field: "\"egoraptor_mentions\".\"id\""},
	GuildID:          whereHelperstring{field: "\"egoraptor_mentions\".\"guild_id\""},
	LastTimestamp:    whereHelpertime_Time{field: "\"egoraptor_mentions\".\"last_timestamp\""},
	LastUser:         whereHelperstring{field: "\"egoraptor_mentions\".\"last_user\""},
	Count:            whereHelperint{field: "\"egoraptor_mentions\".\"count\""},
	TimeoutOnMention: whereHelperbool{field: "\"egoraptor_mentions\".\"timeout_on_mention\""},
	TimeoutLength:    whereHelperint{field: "\"egoraptor_mentions\".\"timeout_length\""},
	CreatedAt:        whereHelpertime_Time{field: "\"egoraptor_mentions\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"egoraptor_mentions\".\"updated_at\""},
}

// EgoraptorMentionRels is where relationship names are stored.
var EgoraptorMentionRels = struct {
}{}

// egoraptorMentionR is where relationships are stored.
type egoraptorMentionR struct {
}

// NewStruct creates a new relationship struct
func (*egoraptorMentionR) NewStruct() *egoraptorMentionR {
	return &egoraptorMentionR{}
}

// egoraptorMentionL is where Load methods for each relationship are stored.
type egoraptorMentionL struct{}

var (
	egoraptorMentionAllColumns            = []string{"id", "guild_id", "last_timestamp", "last_user", "count", "timeout_on_mention", "timeout_length", "created_at", "updated_at"}
	egoraptorMentionColumnsWithoutDefault = []string{"guild_id", "last_timestamp", "last_user", "count"}
	egoraptorMentionColumnsWithDefault    = []string{"id", "timeout_on_mention", "timeout_length", "created_at", "updated_at"}
	egoraptorMentionPrimaryKeyColumns     = []string{"id"}
	egoraptorMentionGeneratedColumns      = []string{}
)

type (
	// EgoraptorMentionSlice is an alias for a slice of pointers to EgoraptorMention.
	// This should almost always be used instead of []EgoraptorMention.
	EgoraptorMentionSlice []*EgoraptorMention

	egoraptorMentionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	egoraptorMentionType                 = reflect.TypeOf(&EgoraptorMention{})
	egoraptorMentionMapping              = queries.MakeStructMapping(egoraptorMentionType)
	egoraptorMentionPrimaryKeyMapping, _ = queries.BindMapping(egoraptorMentionType, egoraptorMentionMapping, egoraptorMentionPrimaryKeyColumns)
	egoraptorMentionInsertCacheMut       sync.RWMutex
	egoraptorMentionInsertCache          = make(map[string]insertCache)
	egoraptorMentionUpdateCacheMut       sync.RWMutex
	egoraptorMentionUpdateCache          = make(map[string]updateCache)
	egoraptorMentionUpsertCacheMut       sync.RWMutex
	egoraptorMentionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single egoraptorMention record from the query.
func (q egoraptorMentionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EgoraptorMention, error) {
	o := &EgoraptorMention{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for egoraptor_mentions")
	}

	return o, nil
}

// All returns all EgoraptorMention records from the query.
func (q egoraptorMentionQuery) All(ctx context.Context, exec boil.ContextExecutor) (EgoraptorMentionSlice, error) {
	var o []*EgoraptorMention

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EgoraptorMention slice")
	}

	return o, nil
}

// Count returns the count of all EgoraptorMention records in the query.
func (q egoraptorMentionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count egoraptor_mentions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q egoraptorMentionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if egoraptor_mentions exists")
	}

	return count > 0, nil
}

// EgoraptorMentions retrieves all the records using an executor.
func EgoraptorMentions(mods ...qm.QueryMod) egoraptorMentionQuery {
	mods = append(mods, qm.From("\"egoraptor_mentions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"egoraptor_mentions\".*"})
	}

	return egoraptorMentionQuery{q}
}

// FindEgoraptorMention retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEgoraptorMention(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*EgoraptorMention, error) {
	egoraptorMentionObj := &EgoraptorMention{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"egoraptor_mentions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, egoraptorMentionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from egoraptor_mentions")
	}

	return egoraptorMentionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EgoraptorMention) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no egoraptor_mentions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(egoraptorMentionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	egoraptorMentionInsertCacheMut.RLock()
	cache, cached := egoraptorMentionInsertCache[key]
	egoraptorMentionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			egoraptorMentionAllColumns,
			egoraptorMentionColumnsWithDefault,
			egoraptorMentionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(egoraptorMentionType, egoraptorMentionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(egoraptorMentionType, egoraptorMentionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"egoraptor_mentions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"egoraptor_mentions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into egoraptor_mentions")
	}

	if !cached {
		egoraptorMentionInsertCacheMut.Lock()
		egoraptorMentionInsertCache[key] = cache
		egoraptorMentionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the EgoraptorMention.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EgoraptorMention) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	egoraptorMentionUpdateCacheMut.RLock()
	cache, cached := egoraptorMentionUpdateCache[key]
	egoraptorMentionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			egoraptorMentionAllColumns,
			egoraptorMentionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update egoraptor_mentions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"egoraptor_mentions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, egoraptorMentionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(egoraptorMentionType, egoraptorMentionMapping, append(wl, egoraptorMentionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update egoraptor_mentions row")
	}

	if !cached {
		egoraptorMentionUpdateCacheMut.Lock()
		egoraptorMentionUpdateCache[key] = cache
		egoraptorMentionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q egoraptorMentionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for egoraptor_mentions")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EgoraptorMentionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), egoraptorMentionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"egoraptor_mentions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, egoraptorMentionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in egoraptorMention slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EgoraptorMention) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no egoraptor_mentions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(egoraptorMentionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	egoraptorMentionUpsertCacheMut.RLock()
	cache, cached := egoraptorMentionUpsertCache[key]
	egoraptorMentionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			egoraptorMentionAllColumns,
			egoraptorMentionColumnsWithDefault,
			egoraptorMentionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			egoraptorMentionAllColumns,
			egoraptorMentionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert egoraptor_mentions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(egoraptorMentionPrimaryKeyColumns))
			copy(conflict, egoraptorMentionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"egoraptor_mentions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(egoraptorMentionType, egoraptorMentionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(egoraptorMentionType, egoraptorMentionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert egoraptor_mentions")
	}

	if !cached {
		egoraptorMentionUpsertCacheMut.Lock()
		egoraptorMentionUpsertCache[key] = cache
		egoraptorMentionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single EgoraptorMention record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EgoraptorMention) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no EgoraptorMention provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), egoraptorMentionPrimaryKeyMapping)
	sql := "DELETE FROM \"egoraptor_mentions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from egoraptor_mentions")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q egoraptorMentionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no egoraptorMentionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from egoraptor_mentions")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EgoraptorMentionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), egoraptorMentionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"egoraptor_mentions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, egoraptorMentionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from egoraptorMention slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EgoraptorMention) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEgoraptorMention(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EgoraptorMentionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EgoraptorMentionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), egoraptorMentionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"egoraptor_mentions\".* FROM \"egoraptor_mentions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, egoraptorMentionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EgoraptorMentionSlice")
	}

	*o = slice

	return nil
}

// EgoraptorMentionExists checks if the EgoraptorMention row exists.
func EgoraptorMentionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"egoraptor_mentions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if egoraptor_mentions exists")
	}

	return exists, nil
}

// Exists checks if the EgoraptorMention row exists.
func (o *EgoraptorMention) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EgoraptorMentionExists(ctx, exec, o.ID)
}
